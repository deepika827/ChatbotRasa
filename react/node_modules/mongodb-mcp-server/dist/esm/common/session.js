import { ObjectId } from "bson";
import { ApiClient } from "./atlas/apiClient.js";
import { LogId } from "./logger.js";
import EventEmitter from "events";
import { ErrorCodes, MongoDBError } from "./errors.js";
export class Session extends EventEmitter {
    constructor({ apiBaseUrl, apiClientId, apiClientSecret, logger, connectionManager, exportsManager, }) {
        super();
        this.sessionId = new ObjectId().toString();
        this.logger = logger;
        const credentials = apiClientId && apiClientSecret
            ? {
                clientId: apiClientId,
                clientSecret: apiClientSecret,
            }
            : undefined;
        this.apiClient = new ApiClient({ baseUrl: apiBaseUrl, credentials }, logger);
        this.exportsManager = exportsManager;
        this.connectionManager = connectionManager;
        this.connectionManager.on("connection-success", () => this.emit("connect"));
        this.connectionManager.on("connection-time-out", (error) => this.emit("connection-error", error));
        this.connectionManager.on("connection-close", () => this.emit("disconnect"));
        this.connectionManager.on("connection-error", (error) => this.emit("connection-error", error));
    }
    setMcpClient(mcpClient) {
        if (!mcpClient) {
            this.connectionManager.setClientName("unknown");
            this.logger.debug({
                id: LogId.serverMcpClientSet,
                context: "session",
                message: "MCP client info not found",
            });
        }
        this.mcpClient = {
            name: mcpClient?.name || "unknown",
            version: mcpClient?.version || "unknown",
            title: mcpClient?.title || "unknown",
        };
        // Set the client name on the connection manager for appName generation
        this.connectionManager.setClientName(this.mcpClient.name || "unknown");
    }
    async disconnect() {
        const atlasCluster = this.connectedAtlasCluster;
        try {
            await this.connectionManager.disconnect();
        }
        catch (err) {
            const error = err instanceof Error ? err : new Error(String(err));
            this.logger.error({
                id: LogId.mongodbDisconnectFailure,
                context: "session",
                message: `Error closing service provider: ${error.message}`,
            });
        }
        if (atlasCluster?.username && atlasCluster?.projectId) {
            void this.apiClient
                .deleteDatabaseUser({
                params: {
                    path: {
                        groupId: atlasCluster.projectId,
                        username: atlasCluster.username,
                        databaseName: "admin",
                    },
                },
            })
                .catch((err) => {
                const error = err instanceof Error ? err : new Error(String(err));
                this.logger.error({
                    id: LogId.atlasDeleteDatabaseUserFailure,
                    context: "session",
                    message: `Error deleting previous database user: ${error.message}`,
                });
            });
        }
    }
    async close() {
        await this.disconnect();
        await this.apiClient.close();
        await this.exportsManager.close();
        this.emit("close");
    }
    async connectToMongoDB(settings) {
        await this.connectionManager.connect({ ...settings });
    }
    get isConnectedToMongoDB() {
        return this.connectionManager.currentConnectionState.tag === "connected";
    }
    get serviceProvider() {
        if (this.isConnectedToMongoDB) {
            const state = this.connectionManager.currentConnectionState;
            return state.serviceProvider;
        }
        throw new MongoDBError(ErrorCodes.NotConnectedToMongoDB, "Not connected to MongoDB");
    }
    get connectedAtlasCluster() {
        return this.connectionManager.currentConnectionState.connectedAtlasCluster;
    }
}
//# sourceMappingURL=session.js.map