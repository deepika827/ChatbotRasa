import createClient from "openapi-fetch";
import { ApiClientError } from "./apiClientError.js";
import { packageInfo } from "../packageInfo.js";
import { LogId } from "../logger.js";
import { createFetch } from "@mongodb-js/devtools-proxy-support";
import * as oauth from "oauth4webapi";
import { Request as NodeFetchRequest } from "node-fetch";
const ATLAS_API_VERSION = "2025-03-12";
export class ApiClient {
    hasCredentials() {
        return !!this.oauth2Client && !!this.oauth2Issuer;
    }
    isAccessTokenValid() {
        return !!(this.accessToken &&
            this.accessToken.expires_at !== undefined &&
            this.accessToken.expires_at > Date.now());
    }
    constructor(options, logger) {
        this.logger = logger;
        this.getAccessToken = async () => {
            if (!this.hasCredentials()) {
                return undefined;
            }
            if (!this.isAccessTokenValid()) {
                this.accessToken = await this.getNewAccessToken();
            }
            return this.accessToken?.access_token;
        };
        this.authMiddleware = {
            onRequest: async ({ request, schemaPath }) => {
                if (schemaPath.startsWith("/api/private/unauth") || schemaPath.startsWith("/api/oauth")) {
                    return undefined;
                }
                try {
                    const accessToken = await this.getAccessToken();
                    if (accessToken) {
                        request.headers.set("Authorization", `Bearer ${accessToken}`);
                    }
                    return request;
                }
                catch {
                    // ignore not availble tokens, API will return 401
                    return undefined;
                }
            },
        };
        this.options = {
            ...options,
            userAgent: options.userAgent ||
                `AtlasMCP/${packageInfo.version} (${process.platform}; ${process.arch}; ${process.env.HOSTNAME || "unknown"})`,
        };
        this.client = createClient({
            baseUrl: this.options.baseUrl,
            headers: {
                "User-Agent": this.options.userAgent,
                Accept: `application/vnd.atlas.${ATLAS_API_VERSION}+json`,
            },
            fetch: ApiClient.customFetch,
            // NodeFetchRequest has more overloadings than the native Request
            // so it complains here. However, the interfaces are actually compatible
            // so it's not a real problem, just a type checking problem.
            Request: NodeFetchRequest,
        });
        if (this.options.credentials?.clientId && this.options.credentials?.clientSecret) {
            this.oauth2Issuer = {
                issuer: this.options.baseUrl,
                token_endpoint: new URL("/api/oauth/token", this.options.baseUrl).toString(),
                revocation_endpoint: new URL("/api/oauth/revoke", this.options.baseUrl).toString(),
                token_endpoint_auth_methods_supported: ["client_secret_basic"],
                grant_types_supported: ["client_credentials"],
            };
            this.oauth2Client = {
                client_id: this.options.credentials.clientId,
                client_secret: this.options.credentials.clientSecret,
            };
            this.client.use(this.authMiddleware);
        }
    }
    getOauthClientAuth() {
        if (this.options.credentials?.clientId && this.options.credentials.clientSecret) {
            const clientSecret = this.options.credentials.clientSecret;
            const clientId = this.options.credentials.clientId;
            // We are using our own ClientAuth because ClientSecretBasic URL encodes wrongly
            // the username and password (for example, encodes `_` to %5F, which is wrong).
            return {
                client: { client_id: clientId },
                clientAuth: (_as, client, _body, headers) => {
                    const credentials = Buffer.from(`${clientId}:${clientSecret}`).toString("base64");
                    headers.set("Authorization", `Basic ${credentials}`);
                },
            };
        }
        return { client: undefined, clientAuth: undefined };
    }
    async getNewAccessToken() {
        if (!this.hasCredentials() || !this.oauth2Issuer) {
            return undefined;
        }
        const { client, clientAuth } = this.getOauthClientAuth();
        if (client && clientAuth) {
            try {
                const response = await oauth.clientCredentialsGrantRequest(this.oauth2Issuer, client, clientAuth, new URLSearchParams(), {
                    [oauth.customFetch]: ApiClient.customFetch,
                    headers: {
                        "User-Agent": this.options.userAgent,
                    },
                });
                const result = await oauth.processClientCredentialsResponse(this.oauth2Issuer, client, response);
                this.accessToken = {
                    access_token: result.access_token,
                    expires_at: Date.now() + (result.expires_in ?? 0) * 1000,
                };
            }
            catch (error) {
                const err = error instanceof Error ? error : new Error(String(error));
                this.logger.error({
                    id: LogId.atlasConnectFailure,
                    context: "apiClient",
                    message: `Failed to request access token: ${err.message}`,
                });
            }
            return this.accessToken;
        }
        return undefined;
    }
    async validateAccessToken() {
        await this.getAccessToken();
    }
    async close() {
        const { client, clientAuth } = this.getOauthClientAuth();
        try {
            if (this.oauth2Issuer && this.accessToken && client && clientAuth) {
                await oauth.revocationRequest(this.oauth2Issuer, client, clientAuth, this.accessToken.access_token);
            }
        }
        catch (error) {
            const err = error instanceof Error ? error : new Error(String(error));
            this.logger.error({
                id: LogId.atlasApiRevokeFailure,
                context: "apiClient",
                message: `Failed to revoke access token: ${err.message}`,
            });
        }
        this.accessToken = undefined;
    }
    async getIpInfo() {
        const accessToken = await this.getAccessToken();
        const endpoint = "api/private/ipinfo";
        const url = new URL(endpoint, this.options.baseUrl);
        const response = await fetch(url, {
            method: "GET",
            headers: {
                Accept: "application/json",
                Authorization: `Bearer ${accessToken}`,
                "User-Agent": this.options.userAgent,
            },
        });
        if (!response.ok) {
            throw await ApiClientError.fromResponse(response);
        }
        return (await response.json());
    }
    async sendEvents(events) {
        if (!this.options.credentials) {
            await this.sendUnauthEvents(events);
            return;
        }
        try {
            await this.sendAuthEvents(events);
        }
        catch (error) {
            if (error instanceof ApiClientError) {
                if (error.response.status !== 401) {
                    throw error;
                }
            }
            // send unauth events if any of the following are true:
            // 1: the token is not valid (not ApiClientError)
            // 2: if the api responded with 401 (ApiClientError with status 401)
            await this.sendUnauthEvents(events);
        }
    }
    async sendAuthEvents(events) {
        const accessToken = await this.getAccessToken();
        if (!accessToken) {
            throw new Error("No access token available");
        }
        const authUrl = new URL("api/private/v1.0/telemetry/events", this.options.baseUrl);
        const response = await fetch(authUrl, {
            method: "POST",
            headers: {
                Accept: "application/json",
                "Content-Type": "application/json",
                "User-Agent": this.options.userAgent,
                Authorization: `Bearer ${accessToken}`,
            },
            body: JSON.stringify(events),
        });
        if (!response.ok) {
            throw await ApiClientError.fromResponse(response);
        }
    }
    async sendUnauthEvents(events) {
        const headers = {
            Accept: "application/json",
            "Content-Type": "application/json",
            "User-Agent": this.options.userAgent,
        };
        const unauthUrl = new URL("api/private/unauth/telemetry/events", this.options.baseUrl);
        const response = await fetch(unauthUrl, {
            method: "POST",
            headers,
            body: JSON.stringify(events),
        });
        if (!response.ok) {
            throw await ApiClientError.fromResponse(response);
        }
    }
    // DO NOT EDIT. This is auto-generated code.
    // eslint-disable-next-line @typescript-eslint/explicit-function-return-type
    async listClustersForAllProjects(options) {
        const { data, error, response } = await this.client.GET("/api/atlas/v2/clusters", options);
        if (error) {
            throw ApiClientError.fromError(response, error);
        }
        return data;
    }
    // eslint-disable-next-line @typescript-eslint/explicit-function-return-type
    async listProjects(options) {
        const { data, error, response } = await this.client.GET("/api/atlas/v2/groups", options);
        if (error) {
            throw ApiClientError.fromError(response, error);
        }
        return data;
    }
    // eslint-disable-next-line @typescript-eslint/explicit-function-return-type
    async createProject(options) {
        const { data, error, response } = await this.client.POST("/api/atlas/v2/groups", options);
        if (error) {
            throw ApiClientError.fromError(response, error);
        }
        return data;
    }
    // eslint-disable-next-line @typescript-eslint/explicit-function-return-type
    async deleteProject(options) {
        const { error, response } = await this.client.DELETE("/api/atlas/v2/groups/{groupId}", options);
        if (error) {
            throw ApiClientError.fromError(response, error);
        }
    }
    // eslint-disable-next-line @typescript-eslint/explicit-function-return-type
    async getProject(options) {
        const { data, error, response } = await this.client.GET("/api/atlas/v2/groups/{groupId}", options);
        if (error) {
            throw ApiClientError.fromError(response, error);
        }
        return data;
    }
    // eslint-disable-next-line @typescript-eslint/explicit-function-return-type
    async listProjectIpAccessLists(options) {
        const { data, error, response } = await this.client.GET("/api/atlas/v2/groups/{groupId}/accessList", options);
        if (error) {
            throw ApiClientError.fromError(response, error);
        }
        return data;
    }
    // eslint-disable-next-line @typescript-eslint/explicit-function-return-type
    async createProjectIpAccessList(options) {
        const { data, error, response } = await this.client.POST("/api/atlas/v2/groups/{groupId}/accessList", options);
        if (error) {
            throw ApiClientError.fromError(response, error);
        }
        return data;
    }
    // eslint-disable-next-line @typescript-eslint/explicit-function-return-type
    async deleteProjectIpAccessList(options) {
        const { error, response } = await this.client.DELETE("/api/atlas/v2/groups/{groupId}/accessList/{entryValue}", options);
        if (error) {
            throw ApiClientError.fromError(response, error);
        }
    }
    // eslint-disable-next-line @typescript-eslint/explicit-function-return-type
    async listAlerts(options) {
        const { data, error, response } = await this.client.GET("/api/atlas/v2/groups/{groupId}/alerts", options);
        if (error) {
            throw ApiClientError.fromError(response, error);
        }
        return data;
    }
    // eslint-disable-next-line @typescript-eslint/explicit-function-return-type
    async listClusters(options) {
        const { data, error, response } = await this.client.GET("/api/atlas/v2/groups/{groupId}/clusters", options);
        if (error) {
            throw ApiClientError.fromError(response, error);
        }
        return data;
    }
    // eslint-disable-next-line @typescript-eslint/explicit-function-return-type
    async createCluster(options) {
        const { data, error, response } = await this.client.POST("/api/atlas/v2/groups/{groupId}/clusters", options);
        if (error) {
            throw ApiClientError.fromError(response, error);
        }
        return data;
    }
    // eslint-disable-next-line @typescript-eslint/explicit-function-return-type
    async deleteCluster(options) {
        const { error, response } = await this.client.DELETE("/api/atlas/v2/groups/{groupId}/clusters/{clusterName}", options);
        if (error) {
            throw ApiClientError.fromError(response, error);
        }
    }
    // eslint-disable-next-line @typescript-eslint/explicit-function-return-type
    async getCluster(options) {
        const { data, error, response } = await this.client.GET("/api/atlas/v2/groups/{groupId}/clusters/{clusterName}", options);
        if (error) {
            throw ApiClientError.fromError(response, error);
        }
        return data;
    }
    // eslint-disable-next-line @typescript-eslint/explicit-function-return-type
    async listDatabaseUsers(options) {
        const { data, error, response } = await this.client.GET("/api/atlas/v2/groups/{groupId}/databaseUsers", options);
        if (error) {
            throw ApiClientError.fromError(response, error);
        }
        return data;
    }
    // eslint-disable-next-line @typescript-eslint/explicit-function-return-type
    async createDatabaseUser(options) {
        const { data, error, response } = await this.client.POST("/api/atlas/v2/groups/{groupId}/databaseUsers", options);
        if (error) {
            throw ApiClientError.fromError(response, error);
        }
        return data;
    }
    // eslint-disable-next-line @typescript-eslint/explicit-function-return-type
    async deleteDatabaseUser(options) {
        const { error, response } = await this.client.DELETE("/api/atlas/v2/groups/{groupId}/databaseUsers/{databaseName}/{username}", options);
        if (error) {
            throw ApiClientError.fromError(response, error);
        }
    }
    // eslint-disable-next-line @typescript-eslint/explicit-function-return-type
    async listFlexClusters(options) {
        const { data, error, response } = await this.client.GET("/api/atlas/v2/groups/{groupId}/flexClusters", options);
        if (error) {
            throw ApiClientError.fromError(response, error);
        }
        return data;
    }
    // eslint-disable-next-line @typescript-eslint/explicit-function-return-type
    async createFlexCluster(options) {
        const { data, error, response } = await this.client.POST("/api/atlas/v2/groups/{groupId}/flexClusters", options);
        if (error) {
            throw ApiClientError.fromError(response, error);
        }
        return data;
    }
    // eslint-disable-next-line @typescript-eslint/explicit-function-return-type
    async deleteFlexCluster(options) {
        const { error, response } = await this.client.DELETE("/api/atlas/v2/groups/{groupId}/flexClusters/{name}", options);
        if (error) {
            throw ApiClientError.fromError(response, error);
        }
    }
    // eslint-disable-next-line @typescript-eslint/explicit-function-return-type
    async getFlexCluster(options) {
        const { data, error, response } = await this.client.GET("/api/atlas/v2/groups/{groupId}/flexClusters/{name}", options);
        if (error) {
            throw ApiClientError.fromError(response, error);
        }
        return data;
    }
    // eslint-disable-next-line @typescript-eslint/explicit-function-return-type
    async listOrganizations(options) {
        const { data, error, response } = await this.client.GET("/api/atlas/v2/orgs", options);
        if (error) {
            throw ApiClientError.fromError(response, error);
        }
        return data;
    }
    // eslint-disable-next-line @typescript-eslint/explicit-function-return-type
    async listOrganizationProjects(options) {
        const { data, error, response } = await this.client.GET("/api/atlas/v2/orgs/{orgId}/groups", options);
        if (error) {
            throw ApiClientError.fromError(response, error);
        }
        return data;
    }
}
// createFetch assumes that the first parameter of fetch is always a string
// with the URL. However, fetch can also receive a Request object. While
// the typechecking complains, createFetch does passthrough the parameters
// so it works fine.
ApiClient.customFetch = createFetch({
    useEnvironmentVariableProxies: true,
});
//# sourceMappingURL=apiClient.js.map