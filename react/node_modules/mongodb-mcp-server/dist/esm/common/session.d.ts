import { ApiClient } from "./atlas/apiClient.js";
import type { Implementation } from "@modelcontextprotocol/sdk/types.js";
import type { CompositeLogger } from "./logger.js";
import EventEmitter from "events";
import type { AtlasClusterConnectionInfo, ConnectionManager, ConnectionSettings, ConnectionStateErrored } from "./connectionManager.js";
import type { NodeDriverServiceProvider } from "@mongosh/service-provider-node-driver";
import type { ExportsManager } from "./exportsManager.js";
export interface SessionOptions {
    apiBaseUrl: string;
    apiClientId?: string;
    apiClientSecret?: string;
    logger: CompositeLogger;
    exportsManager: ExportsManager;
    connectionManager: ConnectionManager;
}
export type SessionEvents = {
    connect: [];
    close: [];
    disconnect: [];
    "connection-error": [ConnectionStateErrored];
};
export declare class Session extends EventEmitter<SessionEvents> {
    readonly sessionId: string;
    readonly exportsManager: ExportsManager;
    readonly connectionManager: ConnectionManager;
    readonly apiClient: ApiClient;
    mcpClient?: {
        name?: string;
        version?: string;
        title?: string;
    };
    logger: CompositeLogger;
    constructor({ apiBaseUrl, apiClientId, apiClientSecret, logger, connectionManager, exportsManager, }: SessionOptions);
    setMcpClient(mcpClient: Implementation | undefined): void;
    disconnect(): Promise<void>;
    close(): Promise<void>;
    connectToMongoDB(settings: ConnectionSettings): Promise<void>;
    get isConnectedToMongoDB(): boolean;
    get serviceProvider(): NodeDriverServiceProvider;
    get connectedAtlasCluster(): AtlasClusterConnectionInfo | undefined;
}
//# sourceMappingURL=session.d.ts.map