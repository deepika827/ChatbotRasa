import { z } from "zod";
import type { ToolArgs, ToolCategory, TelemetryToolMetadata } from "../tool.js";
import { ToolBase } from "../tool.js";
import type { NodeDriverServiceProvider } from "@mongosh/service-provider-node-driver";
import type { CallToolResult } from "@modelcontextprotocol/sdk/types.js";
import type { Server } from "../../server.js";
export declare const DbOperationArgs: {
    database: z.ZodString;
    collection: z.ZodString;
};
export declare abstract class MongoDBToolBase extends ToolBase {
    private server?;
    category: ToolCategory;
    protected ensureConnected(): Promise<NodeDriverServiceProvider>;
    register(server: Server): boolean;
    protected handleError(error: unknown, args: ToolArgs<typeof this.argsShape>): Promise<CallToolResult> | CallToolResult;
    protected connectToMongoDB(connectionString: string): Promise<void>;
    protected resolveTelemetryMetadata(args: ToolArgs<typeof this.argsShape>): TelemetryToolMetadata;
}
//# sourceMappingURL=mongodbTool.d.ts.map