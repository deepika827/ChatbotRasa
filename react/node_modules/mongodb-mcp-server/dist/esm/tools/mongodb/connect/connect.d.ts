import { z } from "zod";
import type { CallToolResult } from "@modelcontextprotocol/sdk/types.js";
import { MongoDBToolBase } from "../mongodbTool.js";
import type { ToolArgs, OperationType } from "../../tool.js";
import type { UserConfig } from "../../../common/config.js";
import type { Telemetry } from "../../../telemetry/telemetry.js";
import type { Session } from "../../../common/session.js";
import type { Server } from "../../../server.js";
declare const connectedName: "switch-connection";
declare const disconnectedName: "connect";
declare const connectedDescription = "Switch to a different MongoDB connection. If the user has configured a connection string or has previously called the connect tool, a connection is already established and there's no need to call this tool unless the user has explicitly requested to switch to a new instance.";
declare const disconnectedDescription = "Connect to a MongoDB instance";
export declare class ConnectTool extends MongoDBToolBase {
    name: typeof connectedName | typeof disconnectedName;
    protected description: typeof connectedDescription | typeof disconnectedDescription;
    protected argsShape: {
        connectionString: z.ZodOptional<z.ZodString>;
    };
    operationType: OperationType;
    constructor(session: Session, config: UserConfig, telemetry: Telemetry);
    protected execute({ connectionString }: ToolArgs<typeof this.argsShape>): Promise<CallToolResult>;
    register(server: Server): boolean;
    private updateMetadata;
}
export {};
//# sourceMappingURL=connect.d.ts.map