import type { z, AnyZodObject } from "zod";
import { type ZodRawShape, type ZodNever } from "zod";
import type { ToolCallback } from "@modelcontextprotocol/sdk/server/mcp.js";
import type { CallToolResult, ToolAnnotations } from "@modelcontextprotocol/sdk/types.js";
import type { Session } from "../common/session.js";
import type { Telemetry } from "../telemetry/telemetry.js";
import type { UserConfig } from "../common/config.js";
import type { Server } from "../server.js";
export type ToolArgs<Args extends ZodRawShape> = z.objectOutputType<Args, ZodNever>;
export type OperationType = "metadata" | "read" | "create" | "delete" | "update" | "connect";
export type ToolCategory = "mongodb" | "atlas";
export type TelemetryToolMetadata = {
    projectId?: string;
    orgId?: string;
};
export declare abstract class ToolBase {
    protected readonly session: Session;
    protected readonly config: UserConfig;
    protected readonly telemetry: Telemetry;
    abstract name: string;
    abstract category: ToolCategory;
    abstract operationType: OperationType;
    protected abstract description: string;
    protected abstract argsShape: ZodRawShape;
    protected get annotations(): ToolAnnotations;
    protected abstract execute(...args: Parameters<ToolCallback<typeof this.argsShape>>): Promise<CallToolResult>;
    constructor(session: Session, config: UserConfig, telemetry: Telemetry);
    register(server: Server): boolean;
    protected update?: (updates: {
        name?: string;
        description?: string;
        inputSchema?: AnyZodObject;
    }) => void;
    protected verifyAllowed(): boolean;
    protected handleError(error: unknown, args: ToolArgs<typeof this.argsShape>): Promise<CallToolResult> | CallToolResult;
    protected abstract resolveTelemetryMetadata(...args: Parameters<ToolCallback<typeof this.argsShape>>): TelemetryToolMetadata;
    /**
     * Creates and emits a tool telemetry event
     * @param startTime - Start time in milliseconds
     * @param result - Whether the command succeeded or failed
     * @param args - The arguments passed to the tool
     */
    private emitToolEvent;
}
export declare function formatUntrustedData(description: string, data?: string): {
    text: string;
    type: "text";
}[];
//# sourceMappingURL=tool.d.ts.map