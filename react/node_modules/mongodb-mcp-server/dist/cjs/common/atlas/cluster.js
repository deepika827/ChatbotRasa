"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatFlexCluster = formatFlexCluster;
exports.formatCluster = formatCluster;
exports.inspectCluster = inspectCluster;
const logger_js_1 = require("../logger.js");
function formatFlexCluster(cluster) {
    return {
        name: cluster.name,
        instanceType: "FLEX",
        instanceSize: undefined,
        state: cluster.stateName,
        mongoDBVersion: cluster.mongoDBVersion,
        connectionString: cluster.connectionStrings?.standardSrv || cluster.connectionStrings?.standard,
    };
}
function formatCluster(cluster) {
    const regionConfigs = (cluster.replicationSpecs || [])
        .map((replicationSpec) => (replicationSpec.regionConfigs || []))
        .flat()
        .map((regionConfig) => {
        return {
            providerName: regionConfig.providerName,
            instanceSize: regionConfig.electableSpecs?.instanceSize ||
                regionConfig.readOnlySpecs?.instanceSize ||
                regionConfig.analyticsSpecs?.instanceSize,
        };
    });
    const instanceSize = regionConfigs[0]?.instanceSize ?? "UNKNOWN";
    const clusterInstanceType = instanceSize === "M0" ? "FREE" : "DEDICATED";
    return {
        name: cluster.name,
        instanceType: clusterInstanceType,
        instanceSize: clusterInstanceType === "DEDICATED" ? instanceSize : undefined,
        state: cluster.stateName,
        mongoDBVersion: cluster.mongoDBVersion,
        connectionString: cluster.connectionStrings?.standardSrv || cluster.connectionStrings?.standard,
    };
}
async function inspectCluster(apiClient, projectId, clusterName) {
    try {
        const cluster = await apiClient.getCluster({
            params: {
                path: {
                    groupId: projectId,
                    clusterName,
                },
            },
        });
        return formatCluster(cluster);
    }
    catch (error) {
        try {
            const cluster = await apiClient.getFlexCluster({
                params: {
                    path: {
                        groupId: projectId,
                        name: clusterName,
                    },
                },
            });
            return formatFlexCluster(cluster);
        }
        catch (flexError) {
            const err = flexError instanceof Error ? flexError : new Error(String(flexError));
            apiClient.logger.error({
                id: logger_js_1.LogId.atlasInspectFailure,
                context: "inspect-cluster",
                message: `error inspecting cluster: ${err.message}`,
            });
            throw error;
        }
    }
}
//# sourceMappingURL=cluster.js.map