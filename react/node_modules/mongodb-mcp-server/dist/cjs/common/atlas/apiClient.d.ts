import type { FetchOptions } from "openapi-fetch";
import type { operations } from "./openapi.js";
import type { CommonProperties, TelemetryEvent } from "../../telemetry/types.js";
import type { LoggerBase } from "../logger.js";
export interface ApiClientCredentials {
    clientId: string;
    clientSecret: string;
}
export interface ApiClientOptions {
    credentials?: ApiClientCredentials;
    baseUrl: string;
    userAgent?: string;
}
export interface AccessToken {
    access_token: string;
    expires_at?: number;
}
export declare class ApiClient {
    readonly logger: LoggerBase;
    private readonly options;
    private static customFetch;
    private client;
    private oauth2Client?;
    private oauth2Issuer?;
    private accessToken?;
    hasCredentials(): boolean;
    private isAccessTokenValid;
    private getAccessToken;
    private authMiddleware;
    constructor(options: ApiClientOptions, logger: LoggerBase);
    private getOauthClientAuth;
    private getNewAccessToken;
    validateAccessToken(): Promise<void>;
    close(): Promise<void>;
    getIpInfo(): Promise<{
        currentIpv4Address: string;
    }>;
    sendEvents(events: TelemetryEvent<CommonProperties>[]): Promise<void>;
    private sendAuthEvents;
    private sendUnauthEvents;
    listClustersForAllProjects(options?: FetchOptions<operations["listClustersForAllProjects"]>): Promise<{
        readonly links?: import("./openapi.js").components["schemas"]["Link"][];
        readonly results?: import("./openapi.js").components["schemas"]["OrgGroup"][];
        readonly totalCount?: number;
    }>;
    listProjects(options?: FetchOptions<operations["listProjects"]>): Promise<{
        readonly links?: import("./openapi.js").components["schemas"]["Link"][];
        readonly results?: import("./openapi.js").components["schemas"]["Group"][];
        readonly totalCount?: number;
    }>;
    createProject(options: FetchOptions<operations["createProject"]>): Promise<{
        readonly clusterCount: number;
        readonly created: string;
        readonly id?: string;
        readonly links?: import("./openapi.js").components["schemas"]["Link"][];
        name: string;
        orgId: string;
        regionUsageRestrictions: "COMMERCIAL_FEDRAMP_REGIONS_ONLY" | "GOV_REGIONS_ONLY";
        tags?: import("./openapi.js").components["schemas"]["ResourceTag"][];
        withDefaultAlertsSettings: boolean;
    }>;
    deleteProject(options: FetchOptions<operations["deleteProject"]>): Promise<void>;
    getProject(options: FetchOptions<operations["getProject"]>): Promise<{
        readonly clusterCount: number;
        readonly created: string;
        readonly id?: string;
        readonly links?: import("./openapi.js").components["schemas"]["Link"][];
        name: string;
        orgId: string;
        regionUsageRestrictions: "COMMERCIAL_FEDRAMP_REGIONS_ONLY" | "GOV_REGIONS_ONLY";
        tags?: import("./openapi.js").components["schemas"]["ResourceTag"][];
        withDefaultAlertsSettings: boolean;
    }>;
    listProjectIpAccessLists(options: FetchOptions<operations["listProjectIpAccessLists"]>): Promise<{
        readonly links?: import("./openapi.js").components["schemas"]["Link"][];
        readonly results?: import("./openapi.js").components["schemas"]["NetworkPermissionEntry"][];
        readonly totalCount?: number;
    }>;
    createProjectIpAccessList(options: FetchOptions<operations["createProjectIpAccessList"]>): Promise<{
        readonly links?: import("./openapi.js").components["schemas"]["Link"][];
        readonly results?: import("./openapi.js").components["schemas"]["NetworkPermissionEntry"][];
        readonly totalCount?: number;
    }>;
    deleteProjectIpAccessList(options: FetchOptions<operations["deleteProjectIpAccessList"]>): Promise<void>;
    listAlerts(options: FetchOptions<operations["listAlerts"]>): Promise<{
        readonly links?: import("./openapi.js").components["schemas"]["Link"][];
        readonly results?: import("./openapi.js").components["schemas"]["AlertViewForNdsGroup"][];
        readonly totalCount?: number;
    }>;
    listClusters(options: FetchOptions<operations["listClusters"]>): Promise<{
        readonly links?: import("./openapi.js").components["schemas"]["Link"][];
        readonly results?: import("./openapi.js").components["schemas"]["ClusterDescription20240805"][];
        readonly totalCount?: number;
    }>;
    createCluster(options: FetchOptions<operations["createCluster"]>): Promise<{
        acceptDataRisksAndForceReplicaSetReconfig?: string;
        advancedConfiguration?: import("./openapi.js").components["schemas"]["ApiAtlasClusterAdvancedConfigurationView"];
        backupEnabled: boolean;
        biConnector?: import("./openapi.js").components["schemas"]["BiConnector"];
        clusterType?: "REPLICASET" | "SHARDED" | "GEOSHARDED";
        configServerManagementMode: "ATLAS_MANAGED" | "FIXED_TO_DEDICATED";
        readonly configServerType?: "DEDICATED" | "EMBEDDED";
        connectionStrings?: import("./openapi.js").components["schemas"]["ClusterConnectionStrings"];
        readonly createDate?: string;
        diskWarmingMode: "FULLY_WARMED" | "VISIBLE_EARLIER";
        encryptionAtRestProvider?: "NONE" | "AWS" | "AZURE" | "GCP";
        readonly featureCompatibilityVersion?: string;
        readonly featureCompatibilityVersionExpirationDate?: string;
        globalClusterSelfManagedSharding?: boolean;
        readonly groupId?: string;
        readonly id?: string;
        labels?: import("./openapi.js").components["schemas"]["ComponentLabel"][];
        readonly links?: import("./openapi.js").components["schemas"]["Link"][];
        mongoDBEmployeeAccessGrant?: import("./openapi.js").components["schemas"]["EmployeeAccessGrantView"];
        mongoDBMajorVersion?: string;
        readonly mongoDBVersion?: string;
        name?: string;
        paused?: boolean;
        pitEnabled?: boolean;
        redactClientLogData?: boolean;
        replicaSetScalingStrategy: "SEQUENTIAL" | "WORKLOAD_TYPE" | "NODE_TYPE";
        replicationSpecs?: import("./openapi.js").components["schemas"]["ReplicationSpec20240805"][];
        rootCertType: "ISRGROOTX1";
        readonly stateName?: "IDLE" | "CREATING" | "UPDATING" | "DELETING" | "REPAIRING";
        tags?: import("./openapi.js").components["schemas"]["ResourceTag"][];
        terminationProtectionEnabled: boolean;
        versionReleaseSystem: "LTS" | "CONTINUOUS";
    }>;
    deleteCluster(options: FetchOptions<operations["deleteCluster"]>): Promise<void>;
    getCluster(options: FetchOptions<operations["getCluster"]>): Promise<{
        acceptDataRisksAndForceReplicaSetReconfig?: string;
        advancedConfiguration?: import("./openapi.js").components["schemas"]["ApiAtlasClusterAdvancedConfigurationView"];
        backupEnabled: boolean;
        biConnector?: import("./openapi.js").components["schemas"]["BiConnector"];
        clusterType?: "REPLICASET" | "SHARDED" | "GEOSHARDED";
        configServerManagementMode: "ATLAS_MANAGED" | "FIXED_TO_DEDICATED";
        readonly configServerType?: "DEDICATED" | "EMBEDDED";
        connectionStrings?: import("./openapi.js").components["schemas"]["ClusterConnectionStrings"];
        readonly createDate?: string;
        diskWarmingMode: "FULLY_WARMED" | "VISIBLE_EARLIER";
        encryptionAtRestProvider?: "NONE" | "AWS" | "AZURE" | "GCP";
        readonly featureCompatibilityVersion?: string;
        readonly featureCompatibilityVersionExpirationDate?: string;
        globalClusterSelfManagedSharding?: boolean;
        readonly groupId?: string;
        readonly id?: string;
        labels?: import("./openapi.js").components["schemas"]["ComponentLabel"][];
        readonly links?: import("./openapi.js").components["schemas"]["Link"][];
        mongoDBEmployeeAccessGrant?: import("./openapi.js").components["schemas"]["EmployeeAccessGrantView"];
        mongoDBMajorVersion?: string;
        readonly mongoDBVersion?: string;
        name?: string;
        paused?: boolean;
        pitEnabled?: boolean;
        redactClientLogData?: boolean;
        replicaSetScalingStrategy: "SEQUENTIAL" | "WORKLOAD_TYPE" | "NODE_TYPE";
        replicationSpecs?: import("./openapi.js").components["schemas"]["ReplicationSpec20240805"][];
        rootCertType: "ISRGROOTX1";
        readonly stateName?: "IDLE" | "CREATING" | "UPDATING" | "DELETING" | "REPAIRING";
        tags?: import("./openapi.js").components["schemas"]["ResourceTag"][];
        terminationProtectionEnabled: boolean;
        versionReleaseSystem: "LTS" | "CONTINUOUS";
    }>;
    listDatabaseUsers(options: FetchOptions<operations["listDatabaseUsers"]>): Promise<{
        readonly links?: import("./openapi.js").components["schemas"]["Link"][];
        readonly results?: import("./openapi.js").components["schemas"]["CloudDatabaseUser"][];
        readonly totalCount?: number;
    }>;
    createDatabaseUser(options: FetchOptions<operations["createDatabaseUser"]>): Promise<{
        awsIAMType: "NONE" | "USER" | "ROLE";
        databaseName: "admin" | "$external";
        deleteAfterDate?: string;
        description?: string;
        groupId: string;
        labels?: import("./openapi.js").components["schemas"]["ComponentLabel"][];
        ldapAuthType: "NONE" | "GROUP" | "USER";
        readonly links?: import("./openapi.js").components["schemas"]["Link"][];
        oidcAuthType: "NONE" | "IDP_GROUP" | "USER";
        password?: string;
        roles?: import("./openapi.js").components["schemas"]["DatabaseUserRole"][];
        scopes?: import("./openapi.js").components["schemas"]["UserScope"][];
        username: string;
        x509Type: "NONE" | "CUSTOMER" | "MANAGED";
    }>;
    deleteDatabaseUser(options: FetchOptions<operations["deleteDatabaseUser"]>): Promise<void>;
    listFlexClusters(options: FetchOptions<operations["listFlexClusters"]>): Promise<{
        readonly links?: import("./openapi.js").components["schemas"]["Link"][];
        readonly results?: import("./openapi.js").components["schemas"]["FlexClusterDescription20241113"][];
        readonly totalCount?: number;
    }>;
    createFlexCluster(options: FetchOptions<operations["createFlexCluster"]>): Promise<{
        backupSettings?: import("./openapi.js").components["schemas"]["FlexBackupSettings20241113"];
        readonly clusterType: "REPLICASET";
        connectionStrings?: import("./openapi.js").components["schemas"]["FlexConnectionStrings20241113"];
        readonly createDate?: string;
        readonly groupId?: string;
        readonly id?: string;
        readonly links?: import("./openapi.js").components["schemas"]["Link"][];
        readonly mongoDBVersion?: string;
        readonly name?: string;
        providerSettings: import("./openapi.js").components["schemas"]["FlexProviderSettings20241113"];
        readonly stateName?: "IDLE" | "CREATING" | "UPDATING" | "DELETING" | "REPAIRING";
        tags?: import("./openapi.js").components["schemas"]["ResourceTag"][];
        terminationProtectionEnabled: boolean;
        readonly versionReleaseSystem: "LTS";
    }>;
    deleteFlexCluster(options: FetchOptions<operations["deleteFlexCluster"]>): Promise<void>;
    getFlexCluster(options: FetchOptions<operations["getFlexCluster"]>): Promise<{
        backupSettings?: import("./openapi.js").components["schemas"]["FlexBackupSettings20241113"];
        readonly clusterType: "REPLICASET";
        connectionStrings?: import("./openapi.js").components["schemas"]["FlexConnectionStrings20241113"];
        readonly createDate?: string;
        readonly groupId?: string;
        readonly id?: string;
        readonly links?: import("./openapi.js").components["schemas"]["Link"][];
        readonly mongoDBVersion?: string;
        readonly name?: string;
        providerSettings: import("./openapi.js").components["schemas"]["FlexProviderSettings20241113"];
        readonly stateName?: "IDLE" | "CREATING" | "UPDATING" | "DELETING" | "REPAIRING";
        tags?: import("./openapi.js").components["schemas"]["ResourceTag"][];
        terminationProtectionEnabled: boolean;
        readonly versionReleaseSystem: "LTS";
    }>;
    listOrganizations(options?: FetchOptions<operations["listOrganizations"]>): Promise<{
        readonly links?: import("./openapi.js").components["schemas"]["Link"][];
        readonly results?: import("./openapi.js").components["schemas"]["AtlasOrganization"][];
        readonly totalCount?: number;
    }>;
    listOrganizationProjects(options: FetchOptions<operations["listOrganizationProjects"]>): Promise<{
        readonly links?: import("./openapi.js").components["schemas"]["Link"][];
        readonly results?: import("./openapi.js").components["schemas"]["Group"][];
        readonly totalCount?: number;
    }>;
}
//# sourceMappingURL=apiClient.d.ts.map