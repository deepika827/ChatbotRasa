"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_ACCESS_LIST_COMMENT = void 0;
exports.makeCurrentIpAccessListEntry = makeCurrentIpAccessListEntry;
exports.ensureCurrentIpInAccessList = ensureCurrentIpInAccessList;
const logger_js_1 = require("../logger.js");
const apiClientError_js_1 = require("./apiClientError.js");
exports.DEFAULT_ACCESS_LIST_COMMENT = "Added by MongoDB MCP Server to enable tool access";
async function makeCurrentIpAccessListEntry(apiClient, projectId, comment = exports.DEFAULT_ACCESS_LIST_COMMENT) {
    const { currentIpv4Address } = await apiClient.getIpInfo();
    return {
        groupId: projectId,
        ipAddress: currentIpv4Address,
        comment,
    };
}
/**
 * Ensures the current public IP is in the access list for the given Atlas project.
 * If the IP is already present, this is a no-op.
 * @param apiClient The Atlas API client instance
 * @param projectId The Atlas project ID
 */
async function ensureCurrentIpInAccessList(apiClient, projectId) {
    const entry = await makeCurrentIpAccessListEntry(apiClient, projectId, exports.DEFAULT_ACCESS_LIST_COMMENT);
    try {
        await apiClient.createProjectIpAccessList({
            params: { path: { groupId: projectId } },
            body: [entry],
        });
        apiClient.logger.debug({
            id: logger_js_1.LogId.atlasIpAccessListAdded,
            context: "accessListUtils",
            message: `IP access list created: ${JSON.stringify(entry)}`,
        });
    }
    catch (err) {
        if (err instanceof apiClientError_js_1.ApiClientError && err.response?.status === 409) {
            // 409 Conflict: entry already exists, log info
            apiClient.logger.debug({
                id: logger_js_1.LogId.atlasIpAccessListAdded,
                context: "accessListUtils",
                message: `IP address ${entry.ipAddress} is already present in the access list for project ${projectId}.`,
            });
            return;
        }
        apiClient.logger.warning({
            id: logger_js_1.LogId.atlasIpAccessListAddFailure,
            context: "accessListUtils",
            message: `Error adding IP access list: ${err instanceof Error ? err.message : String(err)}`,
        });
    }
}
//# sourceMappingURL=accessListUtils.js.map