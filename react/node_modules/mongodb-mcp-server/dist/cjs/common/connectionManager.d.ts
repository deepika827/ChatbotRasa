import type { UserConfig, DriverOptions } from "./config.js";
import { NodeDriverServiceProvider } from "@mongosh/service-provider-node-driver";
import EventEmitter from "events";
import type { DeviceId } from "../helpers/deviceId.js";
import type { CompositeLogger } from "./logger.js";
export interface AtlasClusterConnectionInfo {
    username: string;
    projectId: string;
    clusterName: string;
    expiryDate: Date;
}
export interface ConnectionSettings {
    connectionString: string;
    atlas?: AtlasClusterConnectionInfo;
}
type ConnectionTag = "connected" | "connecting" | "disconnected" | "errored";
type OIDCConnectionAuthType = "oidc-auth-flow" | "oidc-device-flow";
export type ConnectionStringAuthType = "scram" | "ldap" | "kerberos" | OIDCConnectionAuthType | "x.509";
export interface ConnectionState {
    tag: ConnectionTag;
    connectionStringAuthType?: ConnectionStringAuthType;
    connectedAtlasCluster?: AtlasClusterConnectionInfo;
}
export interface ConnectionStateConnected extends ConnectionState {
    tag: "connected";
    serviceProvider: NodeDriverServiceProvider;
}
export interface ConnectionStateConnecting extends ConnectionState {
    tag: "connecting";
    serviceProvider: NodeDriverServiceProvider;
    oidcConnectionType: OIDCConnectionAuthType;
    oidcLoginUrl?: string;
    oidcUserCode?: string;
}
export interface ConnectionStateDisconnected extends ConnectionState {
    tag: "disconnected";
}
export interface ConnectionStateErrored extends ConnectionState {
    tag: "errored";
    errorReason: string;
}
export type AnyConnectionState = ConnectionStateConnected | ConnectionStateConnecting | ConnectionStateDisconnected | ConnectionStateErrored;
export interface ConnectionManagerEvents {
    "connection-request": [AnyConnectionState];
    "connection-success": [ConnectionStateConnected];
    "connection-time-out": [ConnectionStateErrored];
    "connection-close": [ConnectionStateDisconnected];
    "connection-error": [ConnectionStateErrored];
}
export declare class ConnectionManager extends EventEmitter<ConnectionManagerEvents> {
    private userConfig;
    private driverOptions;
    private logger;
    private state;
    private deviceId;
    private clientName;
    private bus;
    constructor(userConfig: UserConfig, driverOptions: DriverOptions, logger: CompositeLogger, deviceId: DeviceId, bus?: EventEmitter);
    setClientName(clientName: string): void;
    connect(settings: ConnectionSettings): Promise<AnyConnectionState>;
    disconnect(): Promise<ConnectionStateDisconnected | ConnectionStateErrored>;
    get currentConnectionState(): AnyConnectionState;
    changeState<Event extends keyof ConnectionManagerEvents, State extends ConnectionManagerEvents[Event][0]>(event: Event, newState: State): State;
    private onOidcAuthFailed;
    private onOidcAuthSucceeded;
    private onOidcNotifyDeviceFlow;
    static inferConnectionTypeFromSettings(config: UserConfig, settings: {
        connectionString: string;
    }): ConnectionStringAuthType;
    private pingAndForget;
    private disconnectOnOidcError;
}
export {};
//# sourceMappingURL=connectionManager.d.ts.map