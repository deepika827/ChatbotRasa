import type { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import type { Session } from "./common/session.js";
import type { Transport } from "@modelcontextprotocol/sdk/shared/transport.js";
import type { LogLevel } from "./common/logger.js";
import type { Telemetry } from "./telemetry/telemetry.js";
import type { UserConfig } from "./common/config.js";
import type { ToolBase } from "./tools/tool.js";
export interface ServerOptions {
    session: Session;
    userConfig: UserConfig;
    mcpServer: McpServer;
    telemetry: Telemetry;
}
export declare class Server {
    readonly session: Session;
    readonly mcpServer: McpServer;
    private readonly telemetry;
    readonly userConfig: UserConfig;
    readonly tools: ToolBase[];
    private _mcpLogLevel;
    get mcpLogLevel(): LogLevel;
    private readonly startTime;
    private readonly subscriptions;
    constructor({ session, mcpServer, userConfig, telemetry }: ServerOptions);
    connect(transport: Transport): Promise<void>;
    close(): Promise<void>;
    sendResourceListChanged(): void;
    sendResourceUpdated(uri: string): void;
    /**
     * Emits a server event
     * @param command - The server command (e.g., "start", "stop", "register", "deregister")
     * @param additionalProperties - Additional properties specific to the event
     */
    private emitServerEvent;
    private registerTools;
    private registerResources;
    private validateConfig;
    private connectToConfigConnectionString;
}
//# sourceMappingURL=server.d.ts.map