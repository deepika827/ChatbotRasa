"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Server = void 0;
const tools_js_1 = require("./tools/atlas/tools.js");
const tools_js_2 = require("./tools/mongodb/tools.js");
const resources_js_1 = require("./resources/resources.js");
const logger_js_1 = require("./common/logger.js");
const types_js_1 = require("@modelcontextprotocol/sdk/types.js");
const assert_1 = __importDefault(require("assert"));
const connectionOptions_js_1 = require("./helpers/connectionOptions.js");
class Server {
    get mcpLogLevel() {
        return this._mcpLogLevel;
    }
    constructor({ session, mcpServer, userConfig, telemetry }) {
        this.tools = [];
        this._mcpLogLevel = "debug";
        this.subscriptions = new Set();
        this.startTime = Date.now();
        this.session = session;
        this.telemetry = telemetry;
        this.mcpServer = mcpServer;
        this.userConfig = userConfig;
    }
    async connect(transport) {
        // Resources are now reactive, so we register them ASAP so they can listen to events like
        // connection events.
        this.registerResources();
        await this.validateConfig();
        this.mcpServer.server.registerCapabilities({ logging: {}, resources: { listChanged: true, subscribe: true } });
        // TODO: Eventually we might want to make tools reactive too instead of relying on custom logic.
        this.registerTools();
        // This is a workaround for an issue we've seen with some models, where they'll see that everything in the `arguments`
        // object is optional, and then not pass it at all. However, the MCP server expects the `arguments` object to be if
        // the tool accepts any arguments, even if they're all optional.
        //
        // see: https://github.com/modelcontextprotocol/typescript-sdk/blob/131776764536b5fdca642df51230a3746fb4ade0/src/server/mcp.ts#L705
        // Since paramsSchema here is not undefined, the server will create a non-optional z.object from it.
        const existingHandler = this.mcpServer.server["_requestHandlers"].get(types_js_1.CallToolRequestSchema.shape.method.value);
        (0, assert_1.default)(existingHandler, "No existing handler found for CallToolRequestSchema");
        this.mcpServer.server.setRequestHandler(types_js_1.CallToolRequestSchema, (request, extra) => {
            if (!request.params.arguments) {
                request.params.arguments = {};
            }
            return existingHandler(request, extra);
        });
        this.mcpServer.server.setRequestHandler(types_js_1.SubscribeRequestSchema, ({ params }) => {
            this.subscriptions.add(params.uri);
            this.session.logger.debug({
                id: logger_js_1.LogId.serverInitialized,
                context: "resources",
                message: `Client subscribed to resource: ${params.uri}`,
            });
            return {};
        });
        this.mcpServer.server.setRequestHandler(types_js_1.UnsubscribeRequestSchema, ({ params }) => {
            this.subscriptions.delete(params.uri);
            this.session.logger.debug({
                id: logger_js_1.LogId.serverInitialized,
                context: "resources",
                message: `Client unsubscribed from resource: ${params.uri}`,
            });
            return {};
        });
        this.mcpServer.server.setRequestHandler(types_js_1.SetLevelRequestSchema, ({ params }) => {
            this._mcpLogLevel = params.level;
            return {};
        });
        this.mcpServer.server.oninitialized = () => {
            this.session.setMcpClient(this.mcpServer.server.getClientVersion());
            // Placed here to start the connection to the config connection string as soon as the server is initialized.
            void this.connectToConfigConnectionString();
            this.session.logger.info({
                id: logger_js_1.LogId.serverInitialized,
                context: "server",
                message: `Server started with transport ${transport.constructor.name} and agent runner ${this.session.mcpClient?.name}`,
            });
            this.emitServerEvent("start", Date.now() - this.startTime);
        };
        this.mcpServer.server.onclose = () => {
            const closeTime = Date.now();
            this.emitServerEvent("stop", Date.now() - closeTime);
        };
        this.mcpServer.server.onerror = (error) => {
            const closeTime = Date.now();
            this.emitServerEvent("stop", Date.now() - closeTime, error);
        };
        await this.mcpServer.connect(transport);
    }
    async close() {
        await this.telemetry.close();
        await this.session.close();
        await this.mcpServer.close();
    }
    sendResourceListChanged() {
        this.mcpServer.sendResourceListChanged();
    }
    sendResourceUpdated(uri) {
        if (this.subscriptions.has(uri)) {
            void this.mcpServer.server.sendResourceUpdated({ uri });
        }
    }
    /**
     * Emits a server event
     * @param command - The server command (e.g., "start", "stop", "register", "deregister")
     * @param additionalProperties - Additional properties specific to the event
     */
    emitServerEvent(command, commandDuration, error) {
        const event = {
            timestamp: new Date().toISOString(),
            source: "mdbmcp",
            properties: {
                result: "success",
                duration_ms: commandDuration,
                component: "server",
                category: "other",
                command: command,
            },
        };
        if (command === "start") {
            event.properties.startup_time_ms = commandDuration;
            event.properties.read_only_mode = this.userConfig.readOnly || false;
            event.properties.disabled_tools = this.userConfig.disabledTools || [];
        }
        if (command === "stop") {
            event.properties.runtime_duration_ms = Date.now() - this.startTime;
            if (error) {
                event.properties.result = "failure";
                event.properties.reason = error.message;
            }
        }
        this.telemetry.emitEvents([event]).catch(() => { });
    }
    registerTools() {
        for (const toolConstructor of [...tools_js_1.AtlasTools, ...tools_js_2.MongoDbTools]) {
            const tool = new toolConstructor(this.session, this.userConfig, this.telemetry);
            if (tool.register(this)) {
                this.tools.push(tool);
            }
        }
    }
    registerResources() {
        for (const resourceConstructor of resources_js_1.Resources) {
            const resource = new resourceConstructor(this.session, this.userConfig, this.telemetry);
            resource.register(this);
        }
    }
    async validateConfig() {
        // Validate connection string
        if (this.userConfig.connectionString) {
            try {
                (0, connectionOptions_js_1.validateConnectionString)(this.userConfig.connectionString, false);
            }
            catch (error) {
                console.error("Connection string validation failed with error: ", error);
                throw new Error("Connection string validation failed with error: " +
                    (error instanceof Error ? error.message : String(error)));
            }
        }
        // Validate API client credentials
        if (this.userConfig.apiClientId && this.userConfig.apiClientSecret) {
            try {
                await this.session.apiClient.validateAccessToken();
            }
            catch (error) {
                if (this.userConfig.connectionString === undefined) {
                    console.error("Failed to validate MongoDB Atlas the credentials from the config: ", error);
                    throw new Error("Failed to connect to MongoDB Atlas instance using the credentials from the config");
                }
                console.error("Failed to validate MongoDB Atlas the credentials from the config, but validated the connection string.");
            }
        }
    }
    async connectToConfigConnectionString() {
        if (this.userConfig.connectionString) {
            try {
                await this.session.connectToMongoDB({
                    connectionString: this.userConfig.connectionString,
                });
            }
            catch (error) {
                console.error("Failed to connect to MongoDB instance using the connection string from the config: ", error);
                throw new Error("Failed to connect to MongoDB instance using the connection string from the config");
            }
        }
    }
}
exports.Server = Server;
//# sourceMappingURL=server.js.map