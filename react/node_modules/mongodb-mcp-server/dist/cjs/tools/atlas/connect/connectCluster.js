"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConnectClusterTool = void 0;
const zod_1 = require("zod");
const atlasTool_js_1 = require("../atlasTool.js");
const generatePassword_js_1 = require("../../../helpers/generatePassword.js");
const logger_js_1 = require("../../../common/logger.js");
const cluster_js_1 = require("../../../common/atlas/cluster.js");
const accessListUtils_js_1 = require("../../../common/atlas/accessListUtils.js");
const roles_js_1 = require("../../../common/atlas/roles.js");
const EXPIRY_MS = 1000 * 60 * 60 * 12; // 12 hours
function sleep(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
}
class ConnectClusterTool extends atlasTool_js_1.AtlasToolBase {
    constructor() {
        super(...arguments);
        this.name = "atlas-connect-cluster";
        this.description = "Connect to MongoDB Atlas cluster";
        this.operationType = "connect";
        this.argsShape = {
            projectId: zod_1.z.string().describe("Atlas project ID"),
            clusterName: zod_1.z.string().describe("Atlas cluster name"),
        };
    }
    queryConnection(projectId, clusterName) {
        if (!this.session.connectedAtlasCluster) {
            if (this.session.isConnectedToMongoDB) {
                return "connected-to-other-cluster";
            }
            return "disconnected";
        }
        const currentConectionState = this.session.connectionManager.currentConnectionState;
        if (this.session.connectedAtlasCluster.projectId !== projectId ||
            this.session.connectedAtlasCluster.clusterName !== clusterName) {
            return "connected-to-other-cluster";
        }
        switch (currentConectionState.tag) {
            case "connecting":
            case "disconnected": // we might still be calling Atlas APIs and not attempted yet to connect to MongoDB, but we are still "connecting"
                return "connecting";
            case "connected":
                return "connected";
            case "errored":
                this.session.logger.debug({
                    id: logger_js_1.LogId.atlasConnectFailure,
                    context: "atlas-connect-cluster",
                    message: `error querying cluster: ${currentConectionState.errorReason}`,
                });
                return "unknown";
        }
    }
    async prepareClusterConnection(projectId, clusterName) {
        const cluster = await (0, cluster_js_1.inspectCluster)(this.session.apiClient, projectId, clusterName);
        if (!cluster.connectionString) {
            throw new Error("Connection string not available");
        }
        const username = `mcpUser${Math.floor(Math.random() * 100000)}`;
        const password = await (0, generatePassword_js_1.generateSecurePassword)();
        const expiryDate = new Date(Date.now() + EXPIRY_MS);
        const role = (0, roles_js_1.getDefaultRoleFromConfig)(this.config);
        await this.session.apiClient.createDatabaseUser({
            params: {
                path: {
                    groupId: projectId,
                },
            },
            body: {
                databaseName: "admin",
                groupId: projectId,
                roles: [role],
                scopes: [{ type: "CLUSTER", name: clusterName }],
                username,
                password,
                awsIAMType: "NONE",
                ldapAuthType: "NONE",
                oidcAuthType: "NONE",
                x509Type: "NONE",
                deleteAfterDate: expiryDate.toISOString(),
                description: "MDB MCP Temporary user, see https://dochub.mongodb.org/core/mongodb-mcp-server-tools-considerations",
            },
        });
        const connectedAtlasCluster = {
            username,
            projectId,
            clusterName,
            expiryDate,
        };
        const cn = new URL(cluster.connectionString);
        cn.username = username;
        cn.password = password;
        cn.searchParams.set("authSource", "admin");
        return { connectionString: cn.toString(), atlas: connectedAtlasCluster };
    }
    async connectToCluster(connectionString, atlas) {
        let lastError = undefined;
        this.session.logger.debug({
            id: logger_js_1.LogId.atlasConnectAttempt,
            context: "atlas-connect-cluster",
            message: `attempting to connect to cluster: ${this.session.connectedAtlasCluster?.clusterName}`,
            noRedaction: true,
        });
        // try to connect for about 5 minutes
        for (let i = 0; i < 600; i++) {
            try {
                lastError = undefined;
                await this.session.connectToMongoDB({ connectionString, atlas });
                break;
            }
            catch (err) {
                const error = err instanceof Error ? err : new Error(String(err));
                lastError = error;
                this.session.logger.debug({
                    id: logger_js_1.LogId.atlasConnectFailure,
                    context: "atlas-connect-cluster",
                    message: `error connecting to cluster: ${error.message}`,
                });
                await sleep(500); // wait for 500ms before retrying
            }
            if (!this.session.connectedAtlasCluster ||
                this.session.connectedAtlasCluster.projectId !== atlas.projectId ||
                this.session.connectedAtlasCluster.clusterName !== atlas.clusterName) {
                throw new Error("Cluster connection aborted");
            }
        }
        if (lastError) {
            if (this.session.connectedAtlasCluster?.projectId === atlas.projectId &&
                this.session.connectedAtlasCluster?.clusterName === atlas.clusterName &&
                this.session.connectedAtlasCluster?.username) {
                void this.session.apiClient
                    .deleteDatabaseUser({
                    params: {
                        path: {
                            groupId: this.session.connectedAtlasCluster.projectId,
                            username: this.session.connectedAtlasCluster.username,
                            databaseName: "admin",
                        },
                    },
                })
                    .catch((err) => {
                    const error = err instanceof Error ? err : new Error(String(err));
                    this.session.logger.debug({
                        id: logger_js_1.LogId.atlasConnectFailure,
                        context: "atlas-connect-cluster",
                        message: `error deleting database user: ${error.message}`,
                    });
                });
            }
            throw lastError;
        }
        this.session.logger.debug({
            id: logger_js_1.LogId.atlasConnectSucceeded,
            context: "atlas-connect-cluster",
            message: `connected to cluster: ${this.session.connectedAtlasCluster?.clusterName}`,
            noRedaction: true,
        });
    }
    async execute({ projectId, clusterName }) {
        await (0, accessListUtils_js_1.ensureCurrentIpInAccessList)(this.session.apiClient, projectId);
        for (let i = 0; i < 60; i++) {
            const state = this.queryConnection(projectId, clusterName);
            switch (state) {
                case "connected": {
                    return {
                        content: [
                            {
                                type: "text",
                                text: `Connected to cluster "${clusterName}".`,
                            },
                        ],
                    };
                }
                case "connecting":
                case "unknown": {
                    break;
                }
                case "connected-to-other-cluster":
                case "disconnected":
                default: {
                    await this.session.disconnect();
                    const { connectionString, atlas } = await this.prepareClusterConnection(projectId, clusterName);
                    // try to connect for about 5 minutes asynchronously
                    void this.connectToCluster(connectionString, atlas).catch((err) => {
                        const error = err instanceof Error ? err : new Error(String(err));
                        this.session.logger.error({
                            id: logger_js_1.LogId.atlasConnectFailure,
                            context: "atlas-connect-cluster",
                            message: `error connecting to cluster: ${error.message}`,
                        });
                    });
                    break;
                }
            }
            await sleep(500);
        }
        return {
            content: [
                {
                    type: "text",
                    text: `Attempting to connect to cluster "${clusterName}"...`,
                },
                {
                    type: "text",
                    text: `Warning: Provisioning a user and connecting to the cluster may take more time, please check again in a few seconds.`,
                },
                {
                    type: "text",
                    text: `Warning: Make sure your IP address was enabled in the allow list setting of the Atlas cluster.`,
                },
            ],
        };
    }
}
exports.ConnectClusterTool = ConnectClusterTool;
//# sourceMappingURL=connectCluster.js.map