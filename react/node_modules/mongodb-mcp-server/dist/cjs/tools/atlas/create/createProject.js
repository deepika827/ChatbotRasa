"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateProjectTool = void 0;
const zod_1 = require("zod");
const atlasTool_js_1 = require("../atlasTool.js");
class CreateProjectTool extends atlasTool_js_1.AtlasToolBase {
    constructor() {
        super(...arguments);
        this.name = "atlas-create-project";
        this.description = "Create a MongoDB Atlas project";
        this.operationType = "create";
        this.argsShape = {
            projectName: zod_1.z.string().optional().describe("Name for the new project"),
            organizationId: zod_1.z.string().optional().describe("Organization ID for the new project"),
        };
    }
    async execute({ projectName, organizationId }) {
        let assumedOrg = false;
        if (!projectName) {
            projectName = "Atlas Project";
        }
        if (!organizationId) {
            try {
                const organizations = await this.session.apiClient.listOrganizations();
                if (!organizations?.results?.length) {
                    throw new Error("No organizations were found in your MongoDB Atlas account. Please create an organization first.");
                }
                const firstOrg = organizations.results[0];
                if (!firstOrg?.id) {
                    throw new Error("The first organization found does not have an ID. Please check your Atlas account.");
                }
                organizationId = firstOrg.id;
                assumedOrg = true;
            }
            catch {
                throw new Error("Could not search for organizations in your MongoDB Atlas account, please provide an organization ID or create one first.");
            }
        }
        const input = {
            name: projectName,
            orgId: organizationId,
        };
        const group = await this.session.apiClient.createProject({
            body: input,
        });
        if (!group?.id) {
            throw new Error("Failed to create project");
        }
        return {
            content: [
                {
                    type: "text",
                    text: `Project "${projectName}" created successfully${assumedOrg ? ` (using organizationId ${organizationId}).` : ""}.`,
                },
            ],
        };
    }
}
exports.CreateProjectTool = CreateProjectTool;
//# sourceMappingURL=createProject.js.map