"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateDBUserTool = void 0;
const zod_1 = require("zod");
const atlasTool_js_1 = require("../atlasTool.js");
const generatePassword_js_1 = require("../../../helpers/generatePassword.js");
const accessListUtils_js_1 = require("../../../common/atlas/accessListUtils.js");
class CreateDBUserTool extends atlasTool_js_1.AtlasToolBase {
    constructor() {
        super(...arguments);
        this.name = "atlas-create-db-user";
        this.description = "Create an MongoDB Atlas database user";
        this.operationType = "create";
        this.argsShape = {
            projectId: zod_1.z.string().describe("Atlas project ID"),
            username: zod_1.z.string().describe("Username for the new user"),
            // Models will generate overly simplistic passwords like SecurePassword123 or
            // AtlasPassword123, which are easily guessable and exploitable. We're instructing
            // the model not to try and generate anything and instead leave the field unset.
            password: zod_1.z
                .string()
                .optional()
                .nullable()
                .describe("Password for the new user. IMPORTANT: If the user hasn't supplied an explicit password, leave it unset and under no circumstances try to generate a random one. A secure password will be generated by the MCP server if necessary."),
            roles: zod_1.z
                .array(zod_1.z.object({
                roleName: zod_1.z.string().describe("Role name"),
                databaseName: zod_1.z.string().describe("Database name").default("admin"),
                collectionName: zod_1.z.string().describe("Collection name").optional(),
            }))
                .describe("Roles for the new user"),
            clusters: zod_1.z
                .array(zod_1.z.string())
                .describe("Clusters to assign the user to, leave empty for access to all clusters")
                .optional(),
        };
    }
    async execute({ projectId, username, password, roles, clusters, }) {
        await (0, accessListUtils_js_1.ensureCurrentIpInAccessList)(this.session.apiClient, projectId);
        const shouldGeneratePassword = !password;
        if (shouldGeneratePassword) {
            password = await (0, generatePassword_js_1.generateSecurePassword)();
        }
        const input = {
            groupId: projectId,
            awsIAMType: "NONE",
            databaseName: "admin",
            ldapAuthType: "NONE",
            oidcAuthType: "NONE",
            x509Type: "NONE",
            username,
            password,
            roles: roles,
            scopes: clusters?.length
                ? clusters.map((cluster) => ({
                    type: "CLUSTER",
                    name: cluster,
                }))
                : undefined,
        };
        await this.session.apiClient.createDatabaseUser({
            params: {
                path: {
                    groupId: projectId,
                },
            },
            body: input,
        });
        return {
            content: [
                {
                    type: "text",
                    text: `User "${username}" created successfully${shouldGeneratePassword ? ` with password: \`${password}\`` : ""}.`,
                },
            ],
        };
    }
}
exports.CreateDBUserTool = CreateDBUserTool;
//# sourceMappingURL=createDBUser.js.map