"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateAccessListTool = void 0;
const zod_1 = require("zod");
const atlasTool_js_1 = require("../atlasTool.js");
const accessListUtils_js_1 = require("../../../common/atlas/accessListUtils.js");
class CreateAccessListTool extends atlasTool_js_1.AtlasToolBase {
    constructor() {
        super(...arguments);
        this.name = "atlas-create-access-list";
        this.description = "Allow Ip/CIDR ranges to access your MongoDB Atlas clusters.";
        this.operationType = "create";
        this.argsShape = {
            projectId: zod_1.z.string().describe("Atlas project ID"),
            ipAddresses: zod_1.z
                .array(zod_1.z.string().ip({ version: "v4" }))
                .describe("IP addresses to allow access from")
                .optional(),
            cidrBlocks: zod_1.z.array(zod_1.z.string().cidr()).describe("CIDR blocks to allow access from").optional(),
            currentIpAddress: zod_1.z.boolean().describe("Add the current IP address").default(false),
            comment: zod_1.z
                .string()
                .describe("Comment for the access list entries")
                .default(accessListUtils_js_1.DEFAULT_ACCESS_LIST_COMMENT)
                .optional(),
        };
    }
    async execute({ projectId, ipAddresses, cidrBlocks, comment, currentIpAddress, }) {
        if (!ipAddresses?.length && !cidrBlocks?.length && !currentIpAddress) {
            throw new Error("One of  ipAddresses, cidrBlocks, currentIpAddress must be provided.");
        }
        const ipInputs = (ipAddresses || []).map((ipAddress) => ({
            groupId: projectId,
            ipAddress,
            comment: comment || accessListUtils_js_1.DEFAULT_ACCESS_LIST_COMMENT,
        }));
        if (currentIpAddress) {
            const input = await (0, accessListUtils_js_1.makeCurrentIpAccessListEntry)(this.session.apiClient, projectId, comment || accessListUtils_js_1.DEFAULT_ACCESS_LIST_COMMENT);
            ipInputs.push(input);
        }
        const cidrInputs = (cidrBlocks || []).map((cidrBlock) => ({
            groupId: projectId,
            cidrBlock,
            comment: comment || accessListUtils_js_1.DEFAULT_ACCESS_LIST_COMMENT,
        }));
        const inputs = [...ipInputs, ...cidrInputs];
        await this.session.apiClient.createProjectIpAccessList({
            params: {
                path: {
                    groupId: projectId,
                },
            },
            body: inputs,
        });
        return {
            content: [
                {
                    type: "text",
                    text: `IP/CIDR ranges added to access list for project ${projectId}.`,
                },
            ],
        };
    }
}
exports.CreateAccessListTool = CreateAccessListTool;
//# sourceMappingURL=createAccessList.js.map