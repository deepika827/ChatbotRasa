"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListClustersTool = void 0;
const zod_1 = require("zod");
const atlasTool_js_1 = require("../atlasTool.js");
const tool_js_1 = require("../../tool.js");
const cluster_js_1 = require("../../../common/atlas/cluster.js");
class ListClustersTool extends atlasTool_js_1.AtlasToolBase {
    constructor() {
        super(...arguments);
        this.name = "atlas-list-clusters";
        this.description = "List MongoDB Atlas clusters";
        this.operationType = "read";
        this.argsShape = {
            projectId: zod_1.z.string().describe("Atlas project ID to filter clusters").optional(),
        };
    }
    async execute({ projectId }) {
        if (!projectId) {
            const data = await this.session.apiClient.listClustersForAllProjects();
            return this.formatAllClustersTable(data);
        }
        else {
            const project = await this.session.apiClient.getProject({
                params: {
                    path: {
                        groupId: projectId,
                    },
                },
            });
            if (!project?.id) {
                throw new Error(`Project with ID "${projectId}" not found.`);
            }
            const data = await this.session.apiClient.listClusters({
                params: {
                    path: {
                        groupId: project.id || "",
                    },
                },
            });
            return this.formatClustersTable(project, data);
        }
    }
    formatAllClustersTable(clusters) {
        if (!clusters?.results?.length) {
            throw new Error("No clusters found.");
        }
        const formattedClusters = clusters.results
            .map((result) => {
            return (result.clusters || []).map((cluster) => {
                return { ...result, ...cluster, clusters: undefined };
            });
        })
            .flat();
        if (!formattedClusters.length) {
            throw new Error("No clusters found.");
        }
        const rows = formattedClusters
            .map((cluster) => {
            return `${cluster.groupName} (${cluster.groupId}) | ${cluster.name}`;
        })
            .join("\n");
        return {
            content: [
                {
                    type: "text",
                    text: `Project | Cluster Name
----------------|----------------
${rows}`,
                },
            ],
        };
    }
    formatClustersTable(project, clusters, flexClusters) {
        // Check if both traditional clusters and flex clusters are absent
        if (!clusters?.results?.length && !flexClusters?.results?.length) {
            return {
                content: [{ type: "text", text: "No clusters found." }],
            };
        }
        const formattedClusters = clusters?.results?.map((cluster) => (0, cluster_js_1.formatCluster)(cluster)) || [];
        const formattedFlexClusters = flexClusters?.results?.map((cluster) => (0, cluster_js_1.formatFlexCluster)(cluster)) || [];
        const rows = [...formattedClusters, ...formattedFlexClusters]
            .map((formattedCluster) => {
            return `${formattedCluster.name || "Unknown"} | ${formattedCluster.instanceType} | ${formattedCluster.instanceSize || "N/A"} | ${formattedCluster.state || "UNKNOWN"} | ${formattedCluster.mongoDBVersion || "N/A"} | ${formattedCluster.connectionString || "N/A"}`;
        })
            .join("\n");
        return {
            content: (0, tool_js_1.formatUntrustedData)(`Found ${rows.length} clusters in project "${project.name}" (${project.id}):`, `Cluster Name | Cluster Type | Tier | State | MongoDB Version | Connection String
----------------|----------------|----------------|----------------|----------------|----------------
${rows}`),
        };
    }
}
exports.ListClustersTool = ListClustersTool;
//# sourceMappingURL=listClusters.js.map