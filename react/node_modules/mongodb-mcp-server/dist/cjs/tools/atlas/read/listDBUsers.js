"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListDBUsersTool = void 0;
const zod_1 = require("zod");
const atlasTool_js_1 = require("../atlasTool.js");
const tool_js_1 = require("../../tool.js");
class ListDBUsersTool extends atlasTool_js_1.AtlasToolBase {
    constructor() {
        super(...arguments);
        this.name = "atlas-list-db-users";
        this.description = "List MongoDB Atlas database users";
        this.operationType = "read";
        this.argsShape = {
            projectId: zod_1.z.string().describe("Atlas project ID to filter DB users"),
        };
    }
    async execute({ projectId }) {
        const data = await this.session.apiClient.listDatabaseUsers({
            params: {
                path: {
                    groupId: projectId,
                },
            },
        });
        if (!data?.results?.length) {
            return {
                content: [{ type: "text", text: " No database users found" }],
            };
        }
        const output = `Username | Roles | Scopes
----------------|----------------|----------------
` +
            data.results
                .map((user) => {
                return `${user.username} | ${formatRoles(user.roles)} | ${formatScopes(user.scopes)}`;
            })
                .join("\n");
        return {
            content: (0, tool_js_1.formatUntrustedData)(`Found ${data.results.length} database users in project ${projectId}`, output),
        };
    }
}
exports.ListDBUsersTool = ListDBUsersTool;
function formatRoles(roles) {
    if (!roles?.length) {
        return "N/A";
    }
    return roles
        .map((role) => `${role.roleName}${role.databaseName ? `@${role.databaseName}${role.collectionName ? `:${role.collectionName}` : ""}` : ""}`)
        .join(", ");
}
function formatScopes(scopes) {
    if (!scopes?.length) {
        return "All";
    }
    return scopes.map((scope) => `${scope.type}:${scope.name}`).join(", ");
}
//# sourceMappingURL=listDBUsers.js.map