"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListAlertsTool = void 0;
const zod_1 = require("zod");
const atlasTool_js_1 = require("../atlasTool.js");
const tool_js_1 = require("../../tool.js");
class ListAlertsTool extends atlasTool_js_1.AtlasToolBase {
    constructor() {
        super(...arguments);
        this.name = "atlas-list-alerts";
        this.description = "List MongoDB Atlas alerts";
        this.operationType = "read";
        this.argsShape = {
            projectId: zod_1.z.string().describe("Atlas project ID to list alerts for"),
        };
    }
    async execute({ projectId }) {
        const data = await this.session.apiClient.listAlerts({
            params: {
                path: {
                    groupId: projectId,
                },
            },
        });
        if (!data?.results?.length) {
            return { content: [{ type: "text", text: "No alerts found in your MongoDB Atlas project." }] };
        }
        // Format alerts as a table
        const output = `Alert ID | Status | Created | Updated | Type | Comment
----------|---------|----------|----------|------|--------
` +
            data.results
                .map((alert) => {
                const created = alert.created ? new Date(alert.created).toLocaleString() : "N/A";
                const updated = alert.updated ? new Date(alert.updated).toLocaleString() : "N/A";
                const comment = alert.acknowledgementComment ?? "N/A";
                return `${alert.id} | ${alert.status} | ${created} | ${updated} | ${alert.eventTypeName} | ${comment}`;
            })
                .join("\n");
        return {
            content: (0, tool_js_1.formatUntrustedData)(`Found ${data.results.length} alerts in project ${projectId}`, output),
        };
    }
}
exports.ListAlertsTool = ListAlertsTool;
//# sourceMappingURL=listAlerts.js.map