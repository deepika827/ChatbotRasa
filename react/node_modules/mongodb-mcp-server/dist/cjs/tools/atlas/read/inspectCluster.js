"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InspectClusterTool = void 0;
const zod_1 = require("zod");
const atlasTool_js_1 = require("../atlasTool.js");
const tool_js_1 = require("../../tool.js");
const cluster_js_1 = require("../../../common/atlas/cluster.js");
class InspectClusterTool extends atlasTool_js_1.AtlasToolBase {
    constructor() {
        super(...arguments);
        this.name = "atlas-inspect-cluster";
        this.description = "Inspect MongoDB Atlas cluster";
        this.operationType = "read";
        this.argsShape = {
            projectId: zod_1.z.string().describe("Atlas project ID"),
            clusterName: zod_1.z.string().describe("Atlas cluster name"),
        };
    }
    async execute({ projectId, clusterName }) {
        const cluster = await (0, cluster_js_1.inspectCluster)(this.session.apiClient, projectId, clusterName);
        return this.formatOutput(cluster);
    }
    formatOutput(formattedCluster) {
        return {
            content: (0, tool_js_1.formatUntrustedData)("Cluster details:", `Cluster Name | Cluster Type | Tier | State | MongoDB Version | Connection String
----------------|----------------|----------------|----------------|----------------|----------------
${formattedCluster.name || "Unknown"} | ${formattedCluster.instanceType} | ${formattedCluster.instanceSize || "N/A"} | ${formattedCluster.state || "UNKNOWN"} | ${formattedCluster.mongoDBVersion || "N/A"} | ${formattedCluster.connectionString || "N/A"}`),
        };
    }
}
exports.InspectClusterTool = InspectClusterTool;
//# sourceMappingURL=inspectCluster.js.map