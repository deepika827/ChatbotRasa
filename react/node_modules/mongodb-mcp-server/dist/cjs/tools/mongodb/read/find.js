"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FindTool = exports.FindArgs = void 0;
const zod_1 = require("zod");
const mongodbTool_js_1 = require("../mongodbTool.js");
const tool_js_1 = require("../../tool.js");
const indexCheck_js_1 = require("../../../helpers/indexCheck.js");
const bson_1 = require("bson");
exports.FindArgs = {
    filter: zod_1.z
        .object({})
        .passthrough()
        .optional()
        .describe("The query filter, matching the syntax of the query argument of db.collection.find()"),
    projection: zod_1.z
        .object({})
        .passthrough()
        .optional()
        .describe("The projection, matching the syntax of the projection argument of db.collection.find()"),
    limit: zod_1.z.number().optional().default(10).describe("The maximum number of documents to return"),
    sort: zod_1.z
        .object({})
        .catchall(zod_1.z.custom())
        .optional()
        .describe("A document, describing the sort order, matching the syntax of the sort argument of cursor.sort(). The keys of the object are the fields to sort on, while the values are the sort directions (1 for ascending, -1 for descending)."),
};
class FindTool extends mongodbTool_js_1.MongoDBToolBase {
    constructor() {
        super(...arguments);
        this.name = "find";
        this.description = "Run a find query against a MongoDB collection";
        this.argsShape = {
            ...mongodbTool_js_1.DbOperationArgs,
            ...exports.FindArgs,
        };
        this.operationType = "read";
    }
    async execute({ database, collection, filter, projection, limit, sort, }) {
        const provider = await this.ensureConnected();
        // Check if find operation uses an index if enabled
        if (this.config.indexCheck) {
            await (0, indexCheck_js_1.checkIndexUsage)(provider, database, collection, "find", async () => {
                return provider.find(database, collection, filter, { projection, limit, sort }).explain("queryPlanner");
            });
        }
        const documents = await provider.find(database, collection, filter, { projection, limit, sort }).toArray();
        return {
            content: (0, tool_js_1.formatUntrustedData)(`Found ${documents.length} documents in the collection "${collection}".`, documents.length > 0 ? bson_1.EJSON.stringify(documents) : undefined),
        };
    }
}
exports.FindTool = FindTool;
//# sourceMappingURL=find.js.map