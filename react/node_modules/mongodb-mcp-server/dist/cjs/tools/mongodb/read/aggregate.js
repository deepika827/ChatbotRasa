"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AggregateTool = exports.AggregateArgs = void 0;
const zod_1 = require("zod");
const mongodbTool_js_1 = require("../mongodbTool.js");
const tool_js_1 = require("../../tool.js");
const indexCheck_js_1 = require("../../../helpers/indexCheck.js");
const bson_1 = require("bson");
exports.AggregateArgs = {
    pipeline: zod_1.z.array(zod_1.z.object({}).passthrough()).describe("An array of aggregation stages to execute"),
};
class AggregateTool extends mongodbTool_js_1.MongoDBToolBase {
    constructor() {
        super(...arguments);
        this.name = "aggregate";
        this.description = "Run an aggregation against a MongoDB collection";
        this.argsShape = {
            ...mongodbTool_js_1.DbOperationArgs,
            ...exports.AggregateArgs,
        };
        this.operationType = "read";
    }
    async execute({ database, collection, pipeline, }) {
        const provider = await this.ensureConnected();
        // Check if aggregate operation uses an index if enabled
        if (this.config.indexCheck) {
            await (0, indexCheck_js_1.checkIndexUsage)(provider, database, collection, "aggregate", async () => {
                return provider
                    .aggregate(database, collection, pipeline, {}, { writeConcern: undefined })
                    .explain("queryPlanner");
            });
        }
        const documents = await provider.aggregate(database, collection, pipeline).toArray();
        return {
            content: (0, tool_js_1.formatUntrustedData)(`The aggregation resulted in ${documents.length} documents.`, documents.length > 0 ? bson_1.EJSON.stringify(documents) : undefined),
        };
    }
}
exports.AggregateTool = AggregateTool;
//# sourceMappingURL=aggregate.js.map