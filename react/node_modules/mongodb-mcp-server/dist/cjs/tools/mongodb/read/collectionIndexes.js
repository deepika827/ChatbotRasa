"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CollectionIndexesTool = void 0;
const mongodbTool_js_1 = require("../mongodbTool.js");
const tool_js_1 = require("../../tool.js");
class CollectionIndexesTool extends mongodbTool_js_1.MongoDBToolBase {
    constructor() {
        super(...arguments);
        this.name = "collection-indexes";
        this.description = "Describe the indexes for a collection";
        this.argsShape = mongodbTool_js_1.DbOperationArgs;
        this.operationType = "read";
    }
    async execute({ database, collection }) {
        const provider = await this.ensureConnected();
        const indexes = await provider.getIndexes(database, collection);
        return {
            content: (0, tool_js_1.formatUntrustedData)(`Found ${indexes.length} indexes in the collection "${collection}":`, indexes.length > 0
                ? indexes
                    .map((index) => `Name: "${index.name}", definition: ${JSON.stringify(index.key)}`)
                    .join("\n")
                : undefined),
        };
    }
    handleError(error, args) {
        if (error instanceof Error && "codeName" in error && error.codeName === "NamespaceNotFound") {
            return {
                content: [
                    {
                        text: `The indexes for "${args.database}.${args.collection}" cannot be determined because the collection does not exist.`,
                        type: "text",
                    },
                ],
            };
        }
        return super.handleError(error, args);
    }
}
exports.CollectionIndexesTool = CollectionIndexesTool;
//# sourceMappingURL=collectionIndexes.js.map