import type { CallToolResult } from "@modelcontextprotocol/sdk/types.js";
import { MongoDBToolBase } from "../mongodbTool.js";
import type { ToolArgs, OperationType } from "../../tool.js";
import { z } from "zod";
export declare class ExplainTool extends MongoDBToolBase {
    name: string;
    protected description: string;
    protected argsShape: {
        method: z.ZodArray<z.ZodDiscriminatedUnion<"name", [z.ZodObject<{
            name: z.ZodLiteral<"aggregate">;
            arguments: z.ZodObject<{
                pipeline: z.ZodArray<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>, "many">;
            }, "strip", z.ZodTypeAny, {
                pipeline: z.objectOutputType<{}, z.ZodTypeAny, "passthrough">[];
            }, {
                pipeline: z.objectInputType<{}, z.ZodTypeAny, "passthrough">[];
            }>;
        }, "strip", z.ZodTypeAny, {
            name: "aggregate";
            arguments: {
                pipeline: z.objectOutputType<{}, z.ZodTypeAny, "passthrough">[];
            };
        }, {
            name: "aggregate";
            arguments: {
                pipeline: z.objectInputType<{}, z.ZodTypeAny, "passthrough">[];
            };
        }>, z.ZodObject<{
            name: z.ZodLiteral<"find">;
            arguments: z.ZodObject<{
                filter: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
                projection: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
                limit: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
                sort: z.ZodOptional<z.ZodObject<{}, "strip", z.ZodType<import("mongodb").SortDirection, z.ZodTypeDef, import("mongodb").SortDirection>, {}, {}>>;
            }, "strip", z.ZodTypeAny, {
                limit: number;
                sort?: {} | undefined;
                filter?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                projection?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
            }, {
                sort?: {} | undefined;
                filter?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                limit?: number | undefined;
                projection?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            name: "find";
            arguments: {
                limit: number;
                sort?: {} | undefined;
                filter?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                projection?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
            };
        }, {
            name: "find";
            arguments: {
                sort?: {} | undefined;
                filter?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
                limit?: number | undefined;
                projection?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
            };
        }>, z.ZodObject<{
            name: z.ZodLiteral<"count">;
            arguments: z.ZodObject<{
                query: z.ZodOptional<z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>>;
            }, "strip", z.ZodTypeAny, {
                query?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
            }, {
                query?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            name: "count";
            arguments: {
                query?: z.objectOutputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
            };
        }, {
            name: "count";
            arguments: {
                query?: z.objectInputType<{}, z.ZodTypeAny, "passthrough"> | undefined;
            };
        }>]>, "many">;
        database: z.ZodString;
        collection: z.ZodString;
    };
    operationType: OperationType;
    static readonly defaultVerbosity: "queryPlanner";
    protected execute({ database, collection, method: methods, }: ToolArgs<typeof this.argsShape>): Promise<CallToolResult>;
}
//# sourceMappingURL=explain.d.ts.map