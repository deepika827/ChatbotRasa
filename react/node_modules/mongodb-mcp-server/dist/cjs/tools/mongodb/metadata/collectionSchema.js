"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CollectionSchemaTool = void 0;
const mongodbTool_js_1 = require("../mongodbTool.js");
const tool_js_1 = require("../../tool.js");
const mongodb_schema_1 = require("mongodb-schema");
class CollectionSchemaTool extends mongodbTool_js_1.MongoDBToolBase {
    constructor() {
        super(...arguments);
        this.name = "collection-schema";
        this.description = "Describe the schema for a collection";
        this.argsShape = mongodbTool_js_1.DbOperationArgs;
        this.operationType = "metadata";
    }
    async execute({ database, collection }) {
        const provider = await this.ensureConnected();
        const documents = await provider.find(database, collection, {}, { limit: 5 }).toArray();
        const schema = await (0, mongodb_schema_1.getSimplifiedSchema)(documents);
        const fieldsCount = Object.entries(schema).length;
        if (fieldsCount === 0) {
            return {
                content: [
                    {
                        text: `Could not deduce the schema for "${database}.${collection}". This may be because it doesn't exist or is empty.`,
                        type: "text",
                    },
                ],
            };
        }
        return {
            content: (0, tool_js_1.formatUntrustedData)(`Found ${fieldsCount} fields in the schema for "${database}.${collection}"`, JSON.stringify(schema)),
        };
    }
}
exports.CollectionSchemaTool = CollectionSchemaTool;
//# sourceMappingURL=collectionSchema.js.map