"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogsTool = void 0;
const mongodbTool_js_1 = require("../mongodbTool.js");
const zod_1 = require("zod");
class LogsTool extends mongodbTool_js_1.MongoDBToolBase {
    constructor() {
        super(...arguments);
        this.name = "mongodb-logs";
        this.description = "Returns the most recent logged mongod events";
        this.argsShape = {
            type: zod_1.z
                .enum(["global", "startupWarnings"])
                .optional()
                .default("global")
                .describe("The type of logs to return. Global returns all recent log entries, while startupWarnings returns only warnings and errors from when the process started."),
            limit: zod_1.z
                .number()
                .int()
                .max(1024)
                .min(1)
                .optional()
                .default(50)
                .describe("The maximum number of log entries to return."),
        };
        this.operationType = "metadata";
    }
    async execute({ type, limit }) {
        const provider = await this.ensureConnected();
        const result = await provider.runCommandWithCheck("admin", {
            getLog: type,
        });
        const logs = result.log.slice(0, limit);
        return {
            content: [
                {
                    text: `Found: ${result.totalLinesWritten} messages`,
                    type: "text",
                },
                ...logs.map((log) => ({
                    text: log,
                    type: "text",
                })),
            ],
        };
    }
}
exports.LogsTool = LogsTool;
//# sourceMappingURL=logs.js.map