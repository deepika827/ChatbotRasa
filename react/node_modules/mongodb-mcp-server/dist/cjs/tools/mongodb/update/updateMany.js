"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateManyTool = void 0;
const zod_1 = require("zod");
const mongodbTool_js_1 = require("../mongodbTool.js");
const indexCheck_js_1 = require("../../../helpers/indexCheck.js");
class UpdateManyTool extends mongodbTool_js_1.MongoDBToolBase {
    constructor() {
        super(...arguments);
        this.name = "update-many";
        this.description = "Updates all documents that match the specified filter for a collection";
        this.argsShape = {
            ...mongodbTool_js_1.DbOperationArgs,
            filter: zod_1.z
                .object({})
                .passthrough()
                .optional()
                .describe("The selection criteria for the update, matching the syntax of the filter argument of db.collection.updateOne()"),
            update: zod_1.z
                .object({})
                .passthrough()
                .describe("An update document describing the modifications to apply using update operator expressions"),
            upsert: zod_1.z
                .boolean()
                .optional()
                .describe("Controls whether to insert a new document if no documents match the filter"),
        };
        this.operationType = "update";
    }
    async execute({ database, collection, filter, update, upsert, }) {
        const provider = await this.ensureConnected();
        // Check if update operation uses an index if enabled
        if (this.config.indexCheck) {
            await (0, indexCheck_js_1.checkIndexUsage)(provider, database, collection, "updateMany", async () => {
                return provider.runCommandWithCheck(database, {
                    explain: {
                        update: collection,
                        updates: [
                            {
                                q: filter || {},
                                u: update,
                                upsert: upsert || false,
                                multi: true,
                            },
                        ],
                    },
                    verbosity: "queryPlanner",
                });
            });
        }
        const result = await provider.updateMany(database, collection, filter, update, {
            upsert,
        });
        let message = "";
        if (result.matchedCount === 0 && result.modifiedCount === 0 && result.upsertedCount === 0) {
            message = "No documents matched the filter.";
        }
        else {
            message = `Matched ${result.matchedCount} document(s).`;
            if (result.modifiedCount > 0) {
                message += ` Modified ${result.modifiedCount} document(s).`;
            }
            if (result.upsertedCount > 0) {
                message += ` Upserted ${result.upsertedCount} document with id: ${result.upsertedId?.toString()}.`;
            }
        }
        return {
            content: [
                {
                    text: message,
                    type: "text",
                },
            ],
        };
    }
}
exports.UpdateManyTool = UpdateManyTool;
//# sourceMappingURL=updateMany.js.map