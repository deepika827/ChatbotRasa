#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
function enableFipsIfRequested() {
    let fipsError;
    const tlsFIPSMode = process.argv.includes("--tlsFIPSMode");
    if (tlsFIPSMode) {
        try {
            // eslint-disable-next-line
            require("crypto").setFips(1);
        }
        catch (err) {
            fipsError ?? (fipsError = err);
        }
    }
    if (tlsFIPSMode) {
        if (!fipsError && !crypto_1.default.getFips()) {
            fipsError = new Error("FIPS mode not enabled despite requested due to unknown error.");
        }
    }
    if (fipsError) {
        if (process.config.variables.node_shared_openssl) {
            console.error("Could not enable FIPS mode. Please ensure that your system OpenSSL installation supports FIPS.");
        }
        else {
            console.error("Could not enable FIPS mode. This installation does not appear to support FIPS.");
        }
        console.error("Error details:");
        console.error(fipsError);
        process.exit(1);
    }
}
enableFipsIfRequested();
const logger_js_1 = require("./common/logger.js");
const config_js_1 = require("./common/config.js");
const crypto_1 = __importDefault(require("crypto"));
const packageInfo_js_1 = require("./common/packageInfo.js");
const stdio_js_1 = require("./transports/stdio.js");
const streamableHttp_js_1 = require("./transports/streamableHttp.js");
const devtools_proxy_support_1 = require("@mongodb-js/devtools-proxy-support");
async function main() {
    (0, devtools_proxy_support_1.systemCA)().catch(() => undefined); // load system CA asynchronously as in mongosh
    assertHelpMode();
    assertVersionMode();
    const transportRunner = config_js_1.config.transport === "stdio"
        ? new stdio_js_1.StdioRunner(config_js_1.config, config_js_1.driverOptions)
        : new streamableHttp_js_1.StreamableHttpRunner(config_js_1.config, config_js_1.driverOptions);
    const shutdown = () => {
        transportRunner.logger.info({
            id: logger_js_1.LogId.serverCloseRequested,
            context: "server",
            message: `Server close requested`,
        });
        transportRunner
            .close()
            .then(() => {
            transportRunner.logger.info({
                id: logger_js_1.LogId.serverClosed,
                context: "server",
                message: `Server closed`,
            });
            process.exit(0);
        })
            .catch((error) => {
            transportRunner.logger.error({
                id: logger_js_1.LogId.serverCloseFailure,
                context: "server",
                message: `Error closing server: ${error}`,
            });
            process.exit(1);
        });
    };
    process.on("SIGINT", shutdown);
    process.on("SIGABRT", shutdown);
    process.on("SIGTERM", shutdown);
    process.on("SIGQUIT", shutdown);
    try {
        await transportRunner.start();
    }
    catch (error) {
        transportRunner.logger.info({
            id: logger_js_1.LogId.serverCloseRequested,
            context: "server",
            message: `Closing server due to error: ${error}`,
            noRedaction: true,
        });
        try {
            await transportRunner.close();
            transportRunner.logger.info({
                id: logger_js_1.LogId.serverClosed,
                context: "server",
                message: "Server closed",
            });
        }
        catch (error) {
            transportRunner.logger.error({
                id: logger_js_1.LogId.serverCloseFailure,
                context: "server",
                message: `Error closing server: ${error}`,
            });
        }
        throw error;
    }
}
main().catch((error) => {
    // At this point, we may be in a very broken state, so we can't rely on the logger
    // being functional. Instead, create a brand new ConsoleLogger and log the error
    // to the console.
    const logger = new logger_js_1.ConsoleLogger();
    logger.emergency({
        id: logger_js_1.LogId.serverStartFailure,
        context: "server",
        message: `Fatal error running server: ${error}`,
    });
    process.exit(1);
});
function assertHelpMode() {
    if (config_js_1.config.help) {
        console.log("For usage information refer to the README.md:");
        console.log("https://github.com/mongodb-js/mongodb-mcp-server?tab=readme-ov-file#quick-start");
        process.exit(0);
    }
}
function assertVersionMode() {
    if (config_js_1.config.version) {
        console.log(packageInfo_js_1.packageInfo.version);
        process.exit(0);
    }
}
//# sourceMappingURL=index.js.map