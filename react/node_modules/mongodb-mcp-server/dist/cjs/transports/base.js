"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransportRunnerBase = void 0;
const packageInfo_js_1 = require("../common/packageInfo.js");
const server_js_1 = require("../server.js");
const session_js_1 = require("../common/session.js");
const telemetry_js_1 = require("../telemetry/telemetry.js");
const mcp_js_1 = require("@modelcontextprotocol/sdk/server/mcp.js");
const logger_js_1 = require("../common/logger.js");
const exportsManager_js_1 = require("../common/exportsManager.js");
const connectionManager_js_1 = require("../common/connectionManager.js");
const deviceId_js_1 = require("../helpers/deviceId.js");
class TransportRunnerBase {
    constructor(userConfig, driverOptions, additionalLoggers) {
        this.userConfig = userConfig;
        this.driverOptions = driverOptions;
        const loggers = [...additionalLoggers];
        if (this.userConfig.loggers.includes("stderr")) {
            loggers.push(new logger_js_1.ConsoleLogger());
        }
        if (this.userConfig.loggers.includes("disk")) {
            loggers.push(new logger_js_1.DiskLogger(this.userConfig.logPath, (err) => {
                // If the disk logger fails to initialize, we log the error to stderr and exit
                console.error("Error initializing disk logger:", err);
                process.exit(1);
            }));
        }
        this.logger = new logger_js_1.CompositeLogger(...loggers);
        this.deviceId = deviceId_js_1.DeviceId.create(this.logger);
    }
    setupServer() {
        const mcpServer = new mcp_js_1.McpServer({
            name: packageInfo_js_1.packageInfo.mcpServerName,
            version: packageInfo_js_1.packageInfo.version,
        });
        const logger = new logger_js_1.CompositeLogger(this.logger);
        const exportsManager = exportsManager_js_1.ExportsManager.init(this.userConfig, logger);
        const connectionManager = new connectionManager_js_1.ConnectionManager(this.userConfig, this.driverOptions, logger, this.deviceId);
        const session = new session_js_1.Session({
            apiBaseUrl: this.userConfig.apiBaseUrl,
            apiClientId: this.userConfig.apiClientId,
            apiClientSecret: this.userConfig.apiClientSecret,
            logger,
            exportsManager,
            connectionManager,
        });
        const telemetry = telemetry_js_1.Telemetry.create(session, this.userConfig, this.deviceId);
        const result = new server_js_1.Server({
            mcpServer,
            session,
            telemetry,
            userConfig: this.userConfig,
        });
        // We need to create the MCP logger after the server is constructed
        // because it needs the server instance
        if (this.userConfig.loggers.includes("mcp")) {
            logger.addLogger(new logger_js_1.McpLogger(result));
        }
        return result;
    }
    async close() {
        try {
            await this.closeTransport();
        }
        finally {
            this.deviceId.close();
        }
    }
}
exports.TransportRunnerBase = TransportRunnerBase;
//# sourceMappingURL=base.js.map